name: Deploy to Amazon ECS
on:
  push:
    branches: 
      - main

env:
  AWS_REGION: us-east-1             
  ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}         
  SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
  SSH_KEY_PRIVATE: ${{ secrets.AWS_SSH_KEY_PRIVATE}}                  
  SSH_PUBLIC_KEY: ${{ secrets.AWS_SSH_PUBLIC_KEY}}  
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME}}  

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs: 
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrappers: false
          
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=us-east-1"
        working-directory: ./terraform

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Plan
        id: plan
        run: |-
          terraform plan \
          -var="region=us-east-1" \
          -var="public_key=$SSH_PUBLIC_KEY" \
          -var="private_key=$SSH_KEY_PRIVATE" \
          -var="key_name=deployer-key" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set output
        id: set
        run: |-
          echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
  deploy-app:
    runs-on: ubuntu-latest   
    needs: deploy-infra
    steps: 
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set ip env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP}} >> GITHUB_ENV
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAUL_REGION: us-east-1
        run: |-
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Deploy Docker image

        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAUL_REGION: us-east-1
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.SERVER_PUBLIC_IP}}
          username: ubuntu
          key: ${{env.SSH_KEY_PRIVATE}}
          envs: SSH_KEY_PRIVATE,ECR_REGISTRY,REPOSITORY,IMAGE_TAG,ACCESS_KEY_ID,SECRET_ACCESS_KEY,AWS_DEFAUL_REGION
          scripts: |-
            sudo apt update
            sudo apr install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get login --no-include-email --region us-east-1);
            sudo docker stop mycontainer || true
            sudo docker rm mycontainer || true
            sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name mycontainer -p 80:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG



      

    
